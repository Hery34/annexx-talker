# app.py
import streamlit as st
import os
from markdown_chatbot import MarkdownChatbot

# Configuration de la page
st.set_page_config(
    page_title="Assistant Documents Markdown",
    page_icon="üí¨",
    layout="wide"
)

# Titre de l'application
st.title("üí¨ Agent conversationnel Annexx")

# Initialisation des variables de session
if "chatbot" not in st.session_state:
    st.session_state.chatbot = None
if "messages" not in st.session_state:
    st.session_state.messages = []

# Sidebar pour la configuration
with st.sidebar:
    st.header("Configuration")
    
    # Input pour la cl√© API OpenAI
    openai_api_key = st.text_input("Cl√© API OpenAI", 
                                  type="password", 
                                  help="Votre cl√© API OpenAI est n√©cessaire")
    
    # Input pour le chemin des documents
    docs_dir = st.text_input("Dossier des documents Markdown", 
                            value="./documents",
                            help="Chemin vers le dossier contenant vos documents")
    
    # Bouton pour initialiser le chatbot
    if st.button("Initialiser l'assistant"):
        if not openai_api_key:
            st.error("Veuillez fournir une cl√© API OpenAI")
        elif not os.path.exists(docs_dir):
            st.error(f"Le dossier {docs_dir} n'existe pas")
        else:
            with st.spinner("Initialisation de l'assistant (cr√©ation des embeddings, cela peut prendre quelques instants)..."):
                try:
                    st.session_state.chatbot = MarkdownChatbot(docs_dir, openai_api_key)
                    st.success("Assistant initialis√© avec succ√®s!")
                    # R√©initialiser l'historique des messages dans l'interface
                    st.session_state.messages = []
                except Exception as e:
                    st.error(f"Erreur lors de l'initialisation: {str(e)}")
    
    # Bouton pour r√©initialiser la conversation
    if st.button("R√©initialiser la conversation"):
        if st.session_state.chatbot:
            st.session_state.chatbot.reset_conversation()
            st.session_state.messages = []
            st.success("Conversation r√©initialis√©e!")

# Affichage des messages
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Input pour la question
if prompt := st.chat_input("Posez votre question..."):
    # V√©rifier si le chatbot est initialis√©
    if not st.session_state.chatbot:
        st.error("Veuillez initialiser l'assistant dans la barre lat√©rale")
    else:
        # Ajouter la question de l'utilisateur √† l'historique
        st.session_state.messages.append({"role": "user", "content": prompt})
        
        # Afficher la question de l'utilisateur
        with st.chat_message("user"):
            st.markdown(prompt)
            
        # Obtenir et afficher la r√©ponse du chatbot
        with st.chat_message("assistant"):
            with st.spinner("R√©flexion en cours..."):
                response = st.session_state.chatbot.ask(prompt)
                st.markdown(response)
                
        # Ajouter la r√©ponse √† l'historique
        st.session_state.messages.append({"role": "assistant", "content": response})

# Informations d'utilisation
if not st.session_state.chatbot:
    st.info("""
    ### Comment utiliser cet assistant:
    
    1. Configurez l'assistant dans la barre lat√©rale:
       - Entrez votre cl√© API OpenAI
       - Sp√©cifiez le chemin vers votre dossier de documents Markdown
       - Cliquez sur "Initialiser l'assistant"
    
    2. Posez vos questions dans la zone de saisie en bas de l'√©cran
    
    3. L'assistant vous r√©pondra en se basant sur le contenu de vos documents
    """)